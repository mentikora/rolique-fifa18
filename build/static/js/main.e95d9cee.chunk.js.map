{"version":3,"sources":["img/bg_optimized.jpg","components/Logo/Logo.tsx","components/Picker/Picker.tsx","registerServiceWorker.js","index.js","App.tsx"],"names":["module","exports","Logo","className","Team","props","name","country","Picker","teams","shuffle","arr","i","length","j","Math","floor","random","pickTeam","max","React","useState","shuffledTeams","setTeams","T1Team","setT1Team","T2Team","setT2Team","useEffect","temp","type","onClick","t1","t2","getTeams","map","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","render","guess","changeGuess","cx","src","img","alt","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e95d9cee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg_optimized.e5424252.jpg\";","import React from 'react'\r\nimport './styles.css'\r\n\r\nexport const Logo = () => (\r\n  <div className=\"logo-wrapper\">\r\n    <span className=\"small\">\r\n      introducing\r\n    </span>\r\n    <span className=\"logo\">\r\n      Rolique\r\n      <br/>\r\n      eSport\r\n    </span>\r\n    <span className=\"small\">\r\n      &deg; ESTD 2018 &deg;\r\n    </span>\r\n  </div>\r\n)\r\n","import React from 'react'\nimport './styles.css'\n\ntype ITeam = {\n  name: string;\n  country: string;\n}\n\nconst Team: React.FunctionComponent<ITeam> = (props) => {\n  const { name, country} = props;\n  return (\n    <div className=\"team\">\n      <span className=\"team__name\">{name}</span>\n      <span className=\"team__country\">( {country} )</span>\n    </div>\n  )\n};\n\nexport const Picker: React.FunctionComponent = () => {\n  const teams: Array<ITeam> = [\n    {name: 'Shakhtar Donetsk', country: 'Ukraine'},\n    {name: 'Juventus', country: 'Italy'},\n    {name: 'SL Benfica', country: 'Portugal'},\n    {name: 'Lazio', country: 'Italy'},\n    {name: 'Dortmund', country: 'Germany'},\n    {name: 'Napoli', country: 'Italy'},\n    {name: 'Villarreal CF', country: 'Spain'},\n    {name: 'Arsenal', country: 'England'},\n    {name: 'OL', country: 'France'},\n    {name: 'Valencia CF', country: 'Spain'},\n    {name: 'Leverkusen', country: 'Germany'},\n    {name: 'FC Porto', country: 'Portugal'},\n    {name: 'Inter', country: 'Italy'},\n    {name: 'Everton', country: 'England'},\n    {name: 'Barselona', country: 'Spain'},\n    {name: 'Dynamo K', country: 'Ukraine'},\n  ];\n\n  const shuffle = (arr: Array<ITeam>) => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n\n  const pickTeam = (arr: Array<ITeam>) => {\n    const min = 0;\n    const max = arr.length - 1;\n    let random = min + Math.random() * (max + 1 - min);\n    return arr[Math.floor(random)];\n  }\n\n  const getTeams = () => {\n    const t1 = pickTeam(shuffledTeams);\n    setT1Team(t1);\n    const t2 = pickTeam(shuffledTeams);\n    setT2Team(t2);\n    shuffle(shuffledTeams);\n  }\n\n  const [shuffledTeams, setTeams] = React.useState();\n  const [T1Team, setT1Team] = React.useState<ITeam>();\n  const [T2Team, setT2Team] = React.useState<ITeam>();\n\n  React.useEffect(() => {\n    const temp = shuffle(teams)\n    setTeams(temp);\n  }, []);\n\n  return <div className=\"team-picker\">\n    <div className=\"team team-one\">\n      {T1Team && <Team {...T1Team} />}\n    </div>\n    <div className=\"teams-list\">\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => getTeams()}\n      >\n        get teams\n      </button>\n      <ul>\n        {\n          !!shuffledTeams && shuffledTeams.map((i: ITeam) => <li key={i.name}><span>{i.name}</span><span className=\"teams-list__team-country\">{i.country}</span></li>)\n        }\n      </ul>\n    </div>\n    <div className=\"team team-one\">\n      {T2Team && <Team {...T2Team} />}\n    </div>\n  </div>\n}\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { render } from 'react-snapshot'\r\nimport { App } from './App'\r\nimport registerServiceWorker from './registerServiceWorker'\r\nrender(<App />, document.getElementById('root'))\r\nregisterServiceWorker()\r\n","import React from 'react'\r\nimport './styles.css'\r\nimport { Logo } from './components/Logo';\r\nimport { Picker } from './components/Picker';\r\nimport img from './img/bg_optimized.jpg';\r\nimport cx from 'classnames';\r\n\r\nconst App: React.FunctionComponent = () => {\r\n  const [guess, changeGuess] = React.useState(true);\r\n  return (\r\n    <main className='App'>\r\n      <section className={cx(\"section-image\", {'mt': guess})}>\r\n        {guess && <div className=\"guess-wr\">\r\n          <p>Guess who can be on that picture</p>\r\n          <button\r\n            onClick={() => changeGuess(false)}\r\n            type=\"button\"\r\n            className=\"button\">I'm ready</button>\r\n        </div>}\r\n        <img\r\n          src={img}\r\n          className={cx({'filter': guess})}\r\n          alt=\"winter is coming\"/>\r\n      </section>\r\n      <section className=\"section-picker\">\r\n        <Picker />\r\n      </section>\r\n      <section className=\"section-motto\">\r\n        <Logo />\r\n        <h1>winter is coming</h1>\r\n      </section>\r\n    </main>\r\n  )\r\n};\r\n\r\nexport { App }\r\n"],"sourceRoot":""}